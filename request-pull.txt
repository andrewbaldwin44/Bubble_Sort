The following changes since commit 59aaeb3b9e8e02d6ce1e7f2518d05e29381351f3:

  Bubble sorting exercise for the Odin Project (2020-04-14 12:50:15 -0400)

are available in the Git repository at:

  git@github.com:andrewbaldwin44/Bubble_Sort.git HEAD

for you to fetch changes up to 1c1977e2290281e1897344401573bc13af933d2c:

  Merge branch 'master' of github.com:andrewbaldwin44/Buble_Sort (2020-05-08 16:56:39 -0400)

----------------------------------------------------------------
Andrew Baldwin (2):
      Improved method
      Merge branch 'master' of github.com:andrewbaldwin44/Buble_Sort

andrewbaldwin44 (2):
      Create README.md
      Update README.md

 README.md      | 10 ++++++++++
 bubble_sort.rb | 35 +++++++++++++++++++----------------
 2 files changed, 29 insertions(+), 16 deletions(-)
 create mode 100644 README.md

diff --git a/README.md b/README.md
new file mode 100644
index 0000000..8a42db8
--- /dev/null
+++ b/README.md
@@ -0,0 +1,10 @@
+# Bubble_Sort
+> Exercise for the Odin Project to create a bubble sort algorithm
+
+[View Demo](https://repl.it/@andrewbaldwin44/BubbleSort)
+
+## Author
+
+ðŸ‘¤ **Andrew Baldwin**
+
+- Github: [@andrewbaldwin44](https://github.com/andrewbaldwin44)
diff --git a/bubble_sort.rb b/bubble_sort.rb
index 793c54a..9f06be0 100644
--- a/bubble_sort.rb
+++ b/bubble_sort.rb
@@ -1,13 +1,12 @@
 class Sort
-  def self.bubble_sort(array, &block)
-    while true
-      #equals half the array length when all is sorted
-      #comparing two items at a time -> half array length
-      sum_of_sorted_items = 0
+  def self.bubble_sort(list, &block)
+    sorted = []
 
-      array.each_cons(2) do |e, i|
-        e_index = array.index(e)
-        i_index = array.index(i)
+    #empty list when all elements have been moved to sorted
+    until list.empty?
+      list.each_cons(2) do |e, i|
+        e_index = list.index(e)
+        i_index = list.index(i)
 
         if block
            next if yield(e, i).negative?
@@ -15,19 +14,23 @@ class Sort
           next if e < i
         end
 
-        array[e_index], array[i_index] = array[i_index], array[e_index]
-
-        sum_of_sorted_items += 1
+        list[e_index], list[i_index] = list[i_index], list[e_index]
       end
-      break if sum_of_sorted_items == (array.length - 1) / 2
+
+      sorted.unshift(list.pop) #item bubbled to end is always the largest
     end
-    array
+    sorted
   end
 
-  def self.bubble_sort_by(array, &block)
-    bubble_sort(array, &block)
+  def self.bubble_sort_by(list, &block)
+    bubble_sort(list, &block)
   end
 end
 
 p Sort.bubble_sort([2, 5, 1, 20, 15, 7])
-p Sort.bubble_sort_by(["hi","hello","hey"]) { |left,right| left.length - right.length}
+p Sort.bubble_sort(["apples", "oranges", "xyplophone", "zebra", "cats"])
+
+large_array = (0..999).to_a.sample(99)
+p Sort.bubble_sort(large_array)
+
+p Sort.bubble_sort_by(["hi","hello","hey"]) { |left, right| left.length - right.length}
